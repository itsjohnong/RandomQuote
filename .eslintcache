[{"/Users/johnong/randomquote/src/index.js":"1","/Users/johnong/randomquote/src/components/App.js":"2","/Users/johnong/randomquote/src/components/Quotes.js":"3"},{"size":156,"mtime":1610409435855,"results":"4","hashOfConfig":"5"},{"size":194,"mtime":1610477507421,"results":"6","hashOfConfig":"5"},{"size":1803,"mtime":1610481474951,"results":"7","hashOfConfig":"5"},{"filePath":"8","messages":"9","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},"s13cn0",{"filePath":"11","messages":"12","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"10"},{"filePath":"13","messages":"14","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"15"},"/Users/johnong/randomquote/src/index.js",[],["16","17"],"/Users/johnong/randomquote/src/components/App.js",[],"/Users/johnong/randomquote/src/components/Quotes.js",["18"],"import React, { useState, useEffect } from 'react';\nimport twitterIcon from './Twitter.svg';\nimport tumblrIcon from './Tumblr.svg';\n\n\nconst Quotes = () => {\n    const [quote, setQuote] = useState('');\n    const [author, setAuthor] = useState('');\n\n    useEffect(() => {\n        getQuote()\n    }, []);\n\n    const getQuote = () => {\n        let url = `https://gist.githubusercontent.com/camperbot/5a022b72e96c4c9585c32bf6a75f62d9/raw/e3c6895ce42069f0ee7e991229064f167fe8ccdc/quotes.json`;\n        fetch(url)\n         .then(res => res.json())\n         .then(data => {\n             let dataQuotes = data.quotes;\n             let randomNum = Math.floor(Math.random() * dataQuotes.length);\n             let randomQuote = dataQuotes[randomNum];\n             setQuote(randomQuote.quote);\n             setAuthor(randomQuote.author);\n         })\n    }\n\n    const handleClick = () => {\n        getQuote();\n    }\n\n    return (\n       <div id=\"quote-box\">\n           <div id=\"text\">\n               <p>{quote}</p>\n           </div>\n           <div id=\"author\">\n                <p>{author}</p>\n            </div>\n            <div id=\"buttons\">\n                <div className=\"social-media\">\n                    <a href=\"twitter.com/intent/tweet\" id=\"tweet-quote\">\n                        <span>\n                            <img src={twitterIcon} alt=\"\" />\n                        </span>\n                    </a>\n                    <a href=\"#\" id=\"tumlr-quote\">\n                        <span>\n                            <img src={tumblrIcon} alt=\"\" />\n                        </span>\n                    </a>\n                </div>\n                <button onClick={handleClick} id=\"new-quote\">\n                    New Quote\n                </button>\n            </div>\n       </div>\n    );\n};\n\nexport default Quotes;",{"ruleId":"19","replacedBy":"20"},{"ruleId":"21","replacedBy":"22"},{"ruleId":"23","severity":1,"message":"24","line":46,"column":21,"nodeType":"25","endLine":46,"endColumn":50},"no-native-reassign",["26"],"no-negated-in-lhs",["27"],"jsx-a11y/anchor-is-valid","The href attribute requires a valid value to be accessible. Provide a valid, navigable address as the href value. If you cannot provide a valid href, but still need the element to resemble a link, use a button and change it with appropriate styles. Learn more: https://github.com/evcohen/eslint-plugin-jsx-a11y/blob/master/docs/rules/anchor-is-valid.md","JSXOpeningElement","no-global-assign","no-unsafe-negation"]